syntax = "proto3";

option go_package = ".;pb";

// gogo proto
import "gogoproto/gogo.proto";
option (gogoproto.gostring_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

service Gossip {
  // GossipStream gossip 消息流
  rpc GossipStream(stream GossipMessage) returns (stream GossipMessage) {}

  // ping
  rpc Ping(Empty) returns (Empty) {}
}

message Empty {}

message GossipMessage {
  string mid = 1;
  string src_id = 2;
  oneof content {
    // 建立连接
    ConnEstablish conn = 3;
    // alive 消息
    AliveMessage alive = 4;
    // leave 消息
    LeaveMessage leave = 5;
    // used fro pinging
    Empty empty = 6;
    // 用户数据
    Envelope user_data = 7;
    // 状态同步
    Envelope pull_req = 8;
    Envelope pull_resp = 9;
    // 成员消息
    MembershipRequest mem_req = 10;
    MembershipResponse mem_resp = 11;
    // 确认消息
    Acknowledgement ack = 12;
    // 点对点消息
    Envelope p2p_msg = 13;
  }
}

message ConnEstablish {string id = 1;}

message AliveMessage {
  Membership membership = 1 [(gogoproto.nullable) = false];
}

message LeaveMessage {
  Membership membership = 1 [(gogoproto.nullable) = false];
}

message Envelope {bytes payload = 1;}

message MembershipRequest{
  Membership membership = 1 [(gogoproto.nullable) = false];
}

message MembershipResponse {
  // member 当前节点成员
  Membership membership = 1[(gogoproto.nullable) = false];
  // alive 活着的网络成员
  repeated Membership alive = 2[(gogoproto.nullable) = false];
  // dead 断联的网络成员
  repeated Membership dead = 3[(gogoproto.nullable) = false];
}

message Acknowledgement {string error = 1;}

message Membership {
  string id =1;
  string endpoint = 2;
  bytes metadata = 3;
}

message RemotePeer {
  string id = 1;
  string endpoint = 2;
}